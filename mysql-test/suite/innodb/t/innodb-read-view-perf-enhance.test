--source include/have_innodb.inc
--source include/have_debug.inc
--source include/not_embedded.inc
--source include/have_query_cache.inc

--echo # Create table to test.
CREATE table t1 (c1 INT PRIMARY KEY, c2 INT, c3 INT, key(c2)) ENGINE=INNODB;
CREATE TABLE t2 (c1 INT, c2 INT, c3 INT) ENGINE=INNODB;

connect(con1,localhost,root,,);
connect(con2,localhost,root,,);
connect(con3,localhost,root,,);
connect(con4,localhost,root,,);
connect(con5,localhost,root,,);

connection con1;
SET SESSION transaction_isolation = 'READ-COMMITTED';
connection con2;
SET SESSION transaction_isolation = 'READ-COMMITTED';
connection con3;
SET SESSION transaction_isolation = 'READ-COMMITTED';
connection con4;
SET SESSION transaction_isolation = 'READ-COMMITTED';


--echo # Test transaction visibility
connection con1;
BEGIN;
INSERT INTO t1 VALUES (1,2,3);
INSERT INTO t1 VALUES (2,3,4);
INSERT INTO t1 VALUES (3,4,5);

connection con2;
BEGIN;
--echo # Shouldn't see (2,3,4)
SELECT * FROM t1 WHERE c1 = 2;
INSERT INTO t1 VALUES (4,5,6);

connection con3;
BEGIN;
--echo # Shouldn't see (4,5,6) or (2,3,4)
SELECT * FROM t1 WHERE c1 = 4;
SELECT * FROM t1 WHERE c1 = 2;

connection con3;
INSERT INTO t1 VALUES (5,6,7);

connection con5;
BEGIN;
INSERT INTO t2 VALUES (1,2,3);
SELECT * FROM t2;

connection con4;
BEGIN;
INSERT INTO t2 VALUES (2,3,4);

connection con2;
COMMIT;

connection con3;
--echo # Can see (4,5,6) because con2 is commited
SELECT * FROM t1 WHERE c1 = 4;


connection con1;
--echo # Shouldn't see (5,6,7)
SELECT * FROM t1 WHERE c1 = 5;

connection con3;
COMMIT;

connection con1;
--echo # Can see (5,6,7) because con3 is commited
SELECT * FROM t1 WHERE c1 = 5;
COMMIT;

connection con1;
START TRANSACTION READ ONLY;
--error 1792
INSERT INTO t1 VALUES (9,9,9);
--error 1792
DELETE FROM t1;
SELECT count(*) FROM t1;
COMMIT;

--sleep 1
connection con1;
COMMIT;

connection con4;
commit;
SELECT COUNT(*) FROM t1;
INSERT INTO t1 VALUES (9,9,9);

--sleep 1
connection con5;
COMMIT;
BEGIN;
SELECT COUNT(*) FROM t1;
DELETE FROM t1;

--echo # Test temporary table now
connection con1;
CREATE TEMPORARY TABLE tmp_a(c1 INT PRIMARY KEY, c2 INT, c3 INT, KEY(c2)) ENGINE=INNODB;
START TRANSACTION READ ONLY;
SELECT * FROM tmp_a;
INSERT INTO tmp_a VALUES (1,2,3);
COMMIT;

START TRANSACTION READ ONLY;
INSERT INTO tmp_a VALUES (2,3,4);
SELECT * FROM tmp_a;
COMMIT;

connection con1;
commit;
connection con2;
commit;
connection con3;
commit;
connection con4;
commit;
connection con5;
commit;

# for coverage test
connection con1;
SET DEBUG = '+d,force_extend_descr';
BEGIN;
INSERT INTO t1 VALUES (9,9,9);
UPDATE t1 SET c2=c2+1 WHERE c1 = 2;
UPDATE t1 SET c2=c2+1 WHERE c1 = 2;

connection con2;
SELECT * FROM t1 WHERE c1 = 2;

connection con1;
COMMIT;

DELIMITER //;

CREATE PROCEDURE p1()
BEGIN
  DECLARE c CURSOR FOR SELECT c1 FROM t1;
  OPEN c;
  CLOSE c;
END //

DELIMITER ;//

CALL p1();

connection con1;
SET DEBUG='';
BEGIN;
INSERT INTO t1 VALUES (12,13,14);

connection con2;
BEGIN;
INSERT INTO t1 VALUES (13,14,15);
UPDATE t1 SET c2=c2+1 WHERE c1 = 2;

connection con3;
BEGIN;
INSERT INTO t1 VALUES (14,15,16);

connection con4;
SELECT COUNT(*) FROM t1;
START TRANSACTION READ ONLY;
SELECT COUNT(*) FROM t1;
COMMIT;
BEGIN;
SELECT * FROM t1;
COMMIT;

connection con1;
commit;
connection con2;
commit;
connection con3;
commit;

connection con1;
BEGIN;
INSERT INTO t2 VALUES (1,2,3);
INSERT INTO t2 VALUES (2,3,4);

connection con2;
UPDATE t2 SET c2=c2+1 WHERE c3 = 3;

connection con1;
COMMIT;

connection con1;
INSERT INTO t1 VALUES (1,2,3),(2,3,4);
SET DEBUG_SYNC = 'RESET';
SET DEBUG_SYNC= 'after_remove_serial_list_release_locks SIGNAL not_in_active_trx_list WAIT_FOR check_sig';
--send UPDATE t1 SET c3=c3+1 WHERE c1= 2;

--sleep 1
connection con2;
SET DEBUG_SYNC= 'NOW WAIT_FOR not_in_active_trx_list';
SET DEBUG_SYNC = 'after_remove_serial_list_release_locks SIGNAL check_sig';
BEGIN;
SELECT * FROM t1 WHERE c1 = 2;
# Should see c3 updated to 5 since locks have been released and the transaction
# has been removed from the active trx list.  ie, output should be: (2,3,5)
INSERT INTO t2 VALUES (9,9,9);
COMMIT;

connection con1;
reap;

# Coverage for read view clone.
connection con1;
SET SESSION transaction_isolation = 'REPEATABLE-READ';
BEGIN;
INSERT INTO t1 VALUES (32,33,34);

connection con2;
SET SESSION transaction_isolation = 'REPEATABLE-READ';
BEGIN;
INSERT INTO t1 VALUES (33,34,35);
SELECT * FROM t1 WHERE c1 = 12;

connection con3;
SET SESSION transaction_isolation = 'REPEATABLE-READ';
BEGIN;
UPDATE t1 SET c3=c3+1 WHERE c1= 2;

connection con1;
#trx_id of con1 should be smaller than con2 and con3;
SELECT * FROM t1 WHERE c1 = 2;

connection con2;
COMMIT;
connection con3;
COMMIT;
--sleep 1
connection con1;
COMMIT;

connection default;
disconnect con1;
disconnect con2;
disconnect con3;
disconnect con4;
disconnect con5;
DROP PROCEDURE p1;
DROP TABLE t1;
DROP TABLE t2;
