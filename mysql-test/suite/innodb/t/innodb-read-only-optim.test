--source include/have_innodb.inc
--source include/not_embedded.inc
--source include/have_log_bin.inc
--source include/have_debug.inc

call mtr.add_suppression("prepared XA transaction");

#create table for test
create table t1 (a int, b int, primary key (a)) engine = innodb;
insert into t1 values (1,2),(2,3);

#Test read-write mode switch
set session transaction_isolation = 'READ-COMMITTED';
begin;
select * from t1 where a = 1;
insert into t1 values (3,4);
commit;
set session transaction_isolation = 'REPEATABLE-READ';
begin;
select * from t1 where a = 3;
insert into t1 values (4,5);
commit;
set session transaction_isolation = 'SERIALIZABLE';
begin;
select * from t1 where a = 4;
insert into t1 values (5,6);
commit;

#Test auto commit trasaction
set session transaction_isolation = 'READ-COMMITTED';
select * from t1 where a = 5;
update t1 set b = b+1 where a = 5;
set session transaction_isolation = 'REPEATABLE-READ';
select * from t1 where a = 5;
update t1 set b = b+1 where a = 5;
set session transaction_isolation = 'SERIALIZABLE';
select * from t1 where a = 5;
update t1 set b = b+1 where a = 5;

#Test read only transaction
set session transaction_isolation = 'READ-COMMITTED';
select * from t1 where a = 4;
select * from t1 where a = 5;
set session transaction_isolation = 'REPEATABLE-READ';
select * from t1 where a = 4;
select * from t1 where a = 5;
set session transaction_isolation = 'SERIALIZABLE';
select * from t1 where a = 4;
select * from t1 where a = 5;

#Add new connection for concurrency tests
connect (con1, localhost, root,,);
connect (con2, localhost, root,,);

connection con1;
set session transaction_isolation = 'READ-COMMITTED';
connection con2;
set session transaction_isolation = 'READ-COMMITTED';

connection con1;
begin;
select * from t1 where a = 5;
insert into t1 values (6,7);

connection con2;
begin;
select * from t1 where a = 5;
select * from t1 where a = 6;
commit;
select * from t1 where a = 6;
select * from t1 where a = 5;

connection con1;
commit;

connection con1;
set session transaction_isolation = 'REPEATABLE-READ';
connection con2;
set session transaction_isolation = 'REPEATABLE-READ';

connection con1;
begin;
select * from t1 where a = 5;
insert into t1 values (7,8);

connection con2;
begin;
select * from t1 where a = 5;
select * from t1 where a = 7;
commit;
select * from t1 where a = 7;
select * from t1 where a = 5;

connection con1;
commit;

#Test deadlock
connection con1;
set session transaction_isolation = 'READ-COMMITTED';
connection con2;
set session transaction_isolation = 'READ-COMMITTED';

connection con1;
begin;
update t1 set b=b+1 where a = 1;
update t1 set b=b+1 where a = 5;

connection con2;
begin;
update t1 set b=b+1 where a = 3;

connection con1;
--send update t1 set b=b+1 where a = 3;

connection con2;
--error ER_LOCK_DEADLOCK
update t1 set b=b+1 where a = 5;

connection con1;
reap

connection con1;
commit;
connection con2;
commit;

connection con1;
begin;
update t1 set b=b+1 where a = 5;

connection con2;
begin;
update t1 set b=b+1 where a = 1;
update t1 set b=b+1 where a = 3;

connection con1;
--send update t1 set b=b+1 where a = 3;

connection con2;
update t1 set b=b+1 where a = 5;

connection con1;
--error ER_LOCK_DEADLOCK
reap

connection con1;
commit;
connection con2;
commit;

connection default;
# Test handler
handler t1 open;
handler t1 read first;
handler t1 read next;
handler t1 close;

# Test ddl transaction
create table t2 (a int) engine = innodb;
alter table t2 add column b int;
alter table t2 add primary key (a);
alter table t2 add column c int;
alter table t2 add key (c);
rename table t2 to t2_tmp;
rename table t2_tmp to t2;
alter table t2 discard tablespace;
drop table t2;

# Test temporary table
create temporary table tmp(a int) engine = innodb;
set session transaction_read_only = 1;
begin;
insert into tmp values (1);
insert into tmp values (2);
commit;
set session transaction_read_only = 0;
drop temporary table tmp;

# Test fulltext index
CREATE TABLE fts_t1 (a VARCHAR(200), b TEXT, FULLTEXT (a,b)) ENGINE = InnoDB;
INSERT INTO fts_t1 VALUES
('MySQL has now support', 'for full-text search'),
('Full-text indexes', 'are called collections'),
('Only MyISAM tables','support collections'),
('Function MATCH ... AGAINST()','is used to do a search'),
('Full-text search in MySQL', 'implements vector space model');

begin;
select * from fts_t1 where MATCH(a,b) AGAINST ("collections");
select * from fts_t1 where MATCH(a,b) AGAINST ("collections" WITH QUERY EXPANSION);
commit;

begin;
select * from fts_t1 where MATCH(a,b) AGAINST ("collections");
delete from fts_t1;
commit;

drop table fts_t1;

# Test XA transaction
xa begin '123';
insert into t1 values (8,9);
xa end '123';
xa prepare '123';
xa commit '123';

# Cover show engine innodb status
connection con1;
begin;
update t1 set b=b+1 where a = 2;
update t1 set b=b+1 where a = 3;
update t1 set b=b+1 where a =4;

connection con2;
begin;
select * from t1 where a =3;

connection default;
let $innodb_status =`show engine innodb status`;

connection con1;
commit;

connection con2;
commit;

connection default;
#Test old style of autoinc lock
show variables like 'innodb_autoinc_lock_mode';
create table tt_autoinc(a int auto_increment primary key, b int);
insert into tt_autoinc values (NULL,1);
insert into tt_autoinc values (NULL,1);
begin;
select * from tt_autoinc order by a;
insert into tt_autoinc values (NULL,1);
delete from tt_autoinc;
commit;
drop table tt_autoinc;

#Test drop database
create database sbs;
use sbs;
create table t1 (a int);
drop database sbs;
use test;

#Test savepoint
begin;
update t1 set b=b+1 where a = 5;
savepoint first_sp;
update t1 set b=b+1 where a = 6;
rollback to savepoint first_sp;
update t1 set b=b+1 where a = 6;
commit;

#Test output of i_s table
connection con1;
begin;
update t1 set b=b+1 where a = 5;
connection con2;
begin;
select * from t1 where a = 3;

connection default;
select trx_state from information_schema.innodb_trx;

connection con1;
commit;
connection con2;
commit;

# Test start transaction with consistent snapshot;
connection con1;
set session transaction_isolation = 'REPEATABLE-READ';
start transaction with consistent snapshot;
select * from t1 where a = 3;
update t1 set b=b+1 where a = 3;
commit;
set session transaction_isolation = 'READ-COMMITTED';

# Test rename of  partition table
create table sb_part(a int) engine = innodb partition by hash(a) partitions 5;
rename table sb_part to sb_part_tmp;
rename table sb_part_tmp to sb_part;
drop table sb_part;

# Test innodb table lock
show session variables like 'innodb_table_locks';
set session innodb_table_locks = 1;
set autocommit = 0;
lock tables t1 write;
unlock tables;
set autocommit = 1;

#Test recover of transaction
connection con1;
xa begin '123';
update t1 set b=b+1 where a = 2;
xa end '123';
xa prepare '123';

connection con2;
--exec echo "wait" > $MYSQLTEST_VARDIR/tmp/mysqld.1.expect
--echo # Crash right after flushing binary log
SET SESSION DEBUG="+d,crash_after_flush_binlog";
BEGIN;
update t1 set b=b+1 where a = 5;

# server errno 2013 means "lost connection to server"
--error 2013
COMMIT;

--enable_reconnect
--echo # Restart the master server
--exec echo "restart" > $MYSQLTEST_VARDIR/tmp/mysqld.1.expect
--source include/wait_until_connected_again.inc
--disable_reconnect

disconnect con1;
disconnect con2;
connect (con1, localhost, root,,);
connect (con2, localhost, root,,);

connection con1;
xa recover;
xa commit '123';

#cleanup
drop table t1;
