#
# Bug #17335427 INNODB CAN NOT USE THE DOUBLEWRITE BUFFER PROPERLY
# Bug #18144349 INNODB CANNOT USE THE DOUBLEWRITE BUFFER FOR THE FIRST
# PAGE OF SYSTEM TABLESPACE
#
SET GLOBAL innodb_fast_shutdown = 0;
# restart
show variables like 'innodb_doublewrite';
Variable_name	Value
innodb_doublewrite	ON
show variables like 'innodb_fil_make_page_dirty_debug';
Variable_name	Value
innodb_fil_make_page_dirty_debug	0
show variables like 'innodb_saved_page_number_debug';
Variable_name	Value
innodb_saved_page_number_debug	0
create table t1 (f1 int primary key, f2 blob) engine=innodb;
create table t2 (f1 int primary key, f2 blob) engine=innodb;
create database testdblwr;
create table testdblwr.t1 (f1 int primary key, f2 blob) engine=innodb;
start transaction;
insert into t1 values(1, repeat('#',12));
insert into t1 values(2, repeat('+',12));
insert into t1 values(3, repeat('/',12));
insert into t1 values(4, repeat('-',12));
insert into t1 values(5, repeat('.',12));
insert into t2 values(1, repeat('#',12));
insert into t2 values(2, repeat('+',12));
insert into t2 values(3, repeat('/',12));
insert into t2 values(4, repeat('-',12));
insert into t2 values(5, repeat('.',12));
insert into testdblwr.t1 values(1, repeat('#',12));
insert into testdblwr.t1 values(2, repeat('+',12));
insert into testdblwr.t1 values(3, repeat('/',12));
insert into testdblwr.t1 values(4, repeat('-',12));
insert into testdblwr.t1 values(5, repeat('.',12));
commit work;
# ---------------------------------------------------------------
# Test Begin: Test if recovery works if first page of user
# tablespace is full of zeroes.
select space from information_schema.innodb_sys_tables
where name = 'test/t1' into @space_id;
# Wait for purge to complete
# Ensure that dirty pages of table t1 is flushed.
flush tables t1 for export;
unlock tables;
begin;
insert into t1 values (6, repeat('%', 12));
SET GLOBAL innodb_master_thread_disabled_debug = 1;
# Make the first page dirty for table t1
set global innodb_saved_page_number_debug = 0;
set global innodb_fil_make_page_dirty_debug = @space_id;
# Ensure that dirty pages of table t1 are flushed.
set global innodb_buf_flush_list_now = 1;
# Kill the server
# Make the first page (page_no=0) of the user tablespace
# full of zeroes.
# restart
check table t1;
Table	Op	Msg_type	Msg_text
test.t1	check	status	OK
select f1, f2 from t1;
f1	f2
1	############
2	++++++++++++
3	////////////
4	------------
5	............
# Test End
# ---------------------------------------------------------------
# Test Begin: Test if recovery works if first page of user
# tablespace is corrupted.
select space from information_schema.innodb_sys_tables
where name = 'test/t1' into @space_id;
# Ensure that dirty pages of table t1 is flushed.
flush tables t1 for export;
unlock tables;
begin;
insert into t1 values (6, repeat('%', 12));
SET GLOBAL innodb_master_thread_disabled_debug = 1;
# Make the first page dirty for table t1
set global innodb_saved_page_number_debug = 0;
set global innodb_fil_make_page_dirty_debug = @space_id;
# Ensure that dirty pages of table t1 are flushed.
set global innodb_buf_flush_list_now = 1;
# Kill the server
# Corrupt the first page (page_no=0) of the user tablespace.
# restart
check table t1;
Table	Op	Msg_type	Msg_text
test.t1	check	status	OK
select f1, f2 from t1;
f1	f2
1	############
2	++++++++++++
3	////////////
4	------------
5	............
# Test End
# ---------------------------------------------------------------
# Test Begin: Test if recovery works if 2nd page of user
# tablespace is full of zeroes.
select space from information_schema.innodb_sys_tables
where name = 'test/t1' into @space_id;
# Ensure that dirty pages of table t1 is flushed.
flush tables t1 for export;
unlock tables;
begin;
insert into t1 values (6, repeat('%', 400));
SET GLOBAL innodb_master_thread_disabled_debug = 1;
# Make the 2nd page dirty for table t1
set global innodb_saved_page_number_debug = 1;
set global innodb_fil_make_page_dirty_debug = @space_id;
# Ensure that dirty pages of table t1 are flushed.
set global innodb_buf_flush_list_now = 1;
# Kill the server
# Make the 2nd page (page_no=1) of the tablespace all zeroes.
# restart
check table t1;
Table	Op	Msg_type	Msg_text
test.t1	check	status	OK
select f1, f2 from t1;
f1	f2
1	############
2	++++++++++++
3	////////////
4	------------
5	............
# Test End
# ---------------------------------------------------------------
# Test Begin: Test if recovery works if 2nd page of user
# tablespace is corrupted.
select space from information_schema.innodb_sys_tables
where name = 'test/t1' into @space_id;
# Ensure that dirty pages of table t1 is flushed.
flush tables t1 for export;
unlock tables;
begin;
insert into t1 values (6, repeat('%', 400));
SET GLOBAL innodb_master_thread_disabled_debug = 1;
# Make the 2nd page dirty for table t1
set global innodb_saved_page_number_debug = 1;
set global innodb_fil_make_page_dirty_debug = @space_id;
# Ensure that the dirty pages of table t1 are flushed.
set global innodb_buf_flush_list_now = 1;
# Kill the server
# Corrupt the 2nd page (page_no=1) of the user tablespace.
# restart
check table t1;
Table	Op	Msg_type	Msg_text
test.t1	check	status	OK
select f1, f2 from t1;
f1	f2
1	############
2	++++++++++++
3	////////////
4	------------
5	............
# Test End
# ---------------------------------------------------------------
# Test Begin: Test if recovery works if first page of
# system tablespace is full of zeroes.
begin;
insert into t1 values (6, repeat('%', 400));
# Ensure that all dirty pages in the system are flushed.
set global innodb_buf_flush_list_now = 1;
# Make the first page dirty for system tablespace
set global innodb_saved_page_number_debug = 0;
set global innodb_fil_make_page_dirty_debug = 0;
# Ensure that the dirty page of system tablespace is also flushed.
set global innodb_buf_flush_list_now = 1;
# Kill the server
# Make the first page (page_no=0) of the system tablespace
# all zeroes.
# restart
check table t1;
Table	Op	Msg_type	Msg_text
test.t1	check	status	OK
select f1, f2 from t1;
f1	f2
1	############
2	++++++++++++
3	////////////
4	------------
5	............
# Test End
# ---------------------------------------------------------------
# Test Begin: Test if recovery works if first page of
# system tablespace is corrupted.
begin;
insert into t1 values (6, repeat('%', 400));
# Ensure that all dirty pages in the system are flushed.
set global innodb_buf_flush_list_now = 1;
# Make the first page dirty for system tablespace
set global innodb_saved_page_number_debug = 0;
set global innodb_fil_make_page_dirty_debug = 0;
# Ensure that the dirty page of system tablespace is also flushed.
set global innodb_buf_flush_list_now = 1;
# Kill the server
# Corrupt the first page (page_no=0) of the system tablespace.
# restart
check table t1;
Table	Op	Msg_type	Msg_text
test.t1	check	status	OK
select f1, f2 from t1;
f1	f2
1	############
2	++++++++++++
3	////////////
4	------------
5	............
# Test End
# ---------------------------------------------------------------
# Test Begin: Test if recovery works if 2nd page of
# system tablespace is full of zeroes.
begin;
insert into t1 values (6, repeat('%', 400));
# Ensure that all dirty pages in the system are flushed.
set global innodb_buf_flush_list_now = 1;
# Make the second page dirty for system tablespace
set global innodb_saved_page_number_debug = 1;
set global innodb_fil_make_page_dirty_debug = 0;
# Ensure that the dirty page of system tablespace is also flushed.
set global innodb_buf_flush_list_now = 1;
# Kill the server
# Make the 2nd page (page_no=1) of the system tablespace
# all zeroes.
# restart
check table t1;
Table	Op	Msg_type	Msg_text
test.t1	check	status	OK
select f1, f2 from t1;
f1	f2
1	############
2	++++++++++++
3	////////////
4	------------
5	............
# Test End
# ---------------------------------------------------------------
# Test Begin: Test if recovery works if 2nd page of
# system tablespace is corrupted.
begin;
insert into t1 values (6, repeat('%', 400));
# Ensure that all dirty pages in the system are flushed.
set global innodb_buf_flush_list_now = 1;
# Make the second page dirty for system tablespace
set global innodb_saved_page_number_debug = 1;
set global innodb_fil_make_page_dirty_debug = 0;
# Ensure that the dirty page of system tablespace is also flushed.
set global innodb_buf_flush_list_now = 1;
# Kill the server
# Make the 2nd page (page_no=1) of the system tablespace
# all zeroes.
# restart
check table t1;
Table	Op	Msg_type	Msg_text
test.t1	check	status	OK
select f1, f2 from t1;
f1	f2
1	############
2	++++++++++++
3	////////////
4	------------
5	............
# Test End
# ---------------------------------------------------------------
# Test Begin: Test if recovery works if 1st and 2nd page of
# system tablespace is corrupted.
begin;
insert into t1 values (6, repeat('%', 400));
# Ensure that all dirty pages in the system are flushed.
set global innodb_buf_flush_list_now = 1;
# Make the first and second page dirty for system tablespace
set global innodb_saved_page_number_debug = 1;
set global innodb_fil_make_page_dirty_debug = 0;
set global innodb_saved_page_number_debug = 0;
set global innodb_fil_make_page_dirty_debug = 0;
# Ensure that the dirty page of system tablespace is also flushed.
set global innodb_buf_flush_list_now = 1;
# Kill the server
# Corrupt the 1st page (page_no=0) of the system tablespace.
# Corrupt the 2nd page (page_no=1) of the system tablespace.
# restart
check table t1;
Table	Op	Msg_type	Msg_text
test.t1	check	status	OK
select f1, f2 from t1;
f1	f2
1	############
2	++++++++++++
3	////////////
4	------------
5	............
# Test End
# ---------------------------------------------------------------
# Test Begin: Test if recovery works if multiple pages corrupted
# and even if mysqld is restarted with skip doublewrite
select space from information_schema.innodb_sys_tables
where name = 'test/t1' into @space_id;
select space from information_schema.innodb_sys_tables
where name = 'test/t2' into @space_id2;
select space from information_schema.innodb_sys_tables
where name = 'testdblwr/t1' into @space_id3;
# Ensure that dirty pages of table t1 is flushed.
flush tables t1,t2,testdblwr.t1 for export;
unlock tables;
begin;
insert into t1 values (6, repeat('%', 400));
insert into t2 values (6, repeat('%', 400));
insert into testdblwr.t1 values (6, repeat('%', 400));
SET GLOBAL innodb_master_thread_disabled_debug = 1;
# Make multiple pages dirty
set global innodb_saved_page_number_debug = 1;
set global innodb_fil_make_page_dirty_debug = @space_id;
set global innodb_saved_page_number_debug = 1;
set global innodb_fil_make_page_dirty_debug = @space_id2;
set global innodb_saved_page_number_debug = 0;
set global innodb_fil_make_page_dirty_debug = @space_id3;
set global innodb_saved_page_number_debug = 1;
set global innodb_fil_make_page_dirty_debug = @space_id3;
# Ensure that the dirty page of system tablespace is also flushed.
set global innodb_buf_flush_list_now = 1;
# Kill the server
# Make multiple pages
# full of zeroes or courrupted.
# restart:--skip-innodb_doublewrite
SELECT @@innodb_doublewrite;
@@innodb_doublewrite
0
check table t1;
Table	Op	Msg_type	Msg_text
test.t1	check	status	OK
check table t2;
Table	Op	Msg_type	Msg_text
test.t2	check	status	OK
check table testdblwr.t1;
Table	Op	Msg_type	Msg_text
testdblwr.t1	check	status	OK
select f1, f2 from t1;
f1	f2
1	############
2	++++++++++++
3	////////////
4	------------
5	............
select f1, f2 from t2;
f1	f2
1	############
2	++++++++++++
3	////////////
4	------------
5	............
select f1, f2 from testdblwr.t1;
f1	f2
1	############
2	++++++++++++
3	////////////
4	------------
5	............
# Test End
# ---------------------------------------------------------------
drop table t1;
drop table t2;
drop database testdblwr;
# test innodb_doublewrite_batch_size configuration variable
# restart:--innodb_doublewrite_batch_size=127
SELECT @@GLOBAL.innodb_doublewrite_batch_size;
@@GLOBAL.innodb_doublewrite_batch_size
127
SELECT @@SESSION.innodb_doublewrite_batch_size;
ERROR HY000: Variable 'innodb_doublewrite_batch_size' is a GLOBAL variable
# restart:--innodb_doublewrite_batch_size=1
SELECT @@innodb_doublewrite_batch_size;
@@innodb_doublewrite_batch_size
1
# restart:--innodb_doublewrite_batch_size=128
SELECT @@innodb_doublewrite_batch_size;
@@innodb_doublewrite_batch_size
127
# restart:--innodb_doublewrite_batch_size=0
SELECT @@innodb_doublewrite_batch_size;
@@innodb_doublewrite_batch_size
1
# restart
# innodb_doublewrite_batch_size default value
SELECT @@GLOBAL.innodb_doublewrite_batch_size;
@@GLOBAL.innodb_doublewrite_batch_size
64
# Setting innodb_doublewrite_batch_size should fail
SET @@GLOBAL.innodb_doublewrite_batch_size=32;
ERROR HY000: Variable 'innodb_doublewrite_batch_size' is a read only variable
SET @@SESSION.innodb_doublewrite_batch_size=32;
ERROR HY000: Variable 'innodb_doublewrite_batch_size' is a read only variable
#
# BUG#20511314 - INNODB: FAILING ASSERTION: FOUND IN BUF0BUF.CC LINE 3856
#
SET GLOBAL innodb_fil_make_page_dirty_debug=38098908;
#
# Bug#22311319 - SERVER CRASHES ON INVALID VALUE FOR VARIABLE
#		INNODB_SAVED_PAGE_NUMBER_DEBUG
#
set global innodb_saved_page_number_debug=461461461;
set global innodb_fil_make_page_dirty_debug=0;
set global innodb_saved_page_number_debug=default;
