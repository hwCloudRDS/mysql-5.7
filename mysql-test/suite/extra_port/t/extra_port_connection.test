USE mysql;
--echo
--echo # ----------------------------------------------------------------------
--echo

--echo # Setup

--disable_warnings
DROP TABLE IF EXISTS user_backup;
--enable_warnings
CREATE TABLE user_backup LIKE user;
INSERT INTO user_backup SELECT * FROM user;

GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, RELOAD, PROCESS, REFERENCES, INDEX, ALTER, SHOW DATABASES, CREATE TEMPORARY TABLES, LOCK TABLES, EXECUTE, REPLICATION SLAVE, REPLICATION CLIENT, CREATE VIEW, SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, CREATE USER, EVENT, TRIGGER ON *.* TO 'reserved_user'@'%' IDENTIFIED BY '123456' WITH GRANT OPTION;
GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, RELOAD, PROCESS, REFERENCES, INDEX, ALTER, SHOW DATABASES, CREATE TEMPORARY TABLES, LOCK TABLES, EXECUTE, REPLICATION SLAVE, REPLICATION CLIENT, CREATE VIEW, SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, CREATE USER, EVENT, TRIGGER ON *.* TO 'normal_user'@'%' IDENTIFIED BY '123456' WITH GRANT OPTION;
GRANT ALL PRIVILEGES ON *.* TO 'super'@'%' IDENTIFIED BY '123456' WITH GRANT OPTION;

--echo # When the parameter extra_port is not zero, the extra port feature is opened and normal port still work as before.

show variables like 'rds_reserved_users';
show variables like 'extra_port';
show variables like 'extra_max_connections';

--echo
--echo # ----------------------------------------------------------------------
--echo
--echo # Test 1: The reserved user can connect the database through the extra port.

connect(res_conn1,127.0.0.1,reserved_user,123456,mysql,1300);
select 1;


--echo
--echo # ----------------------------------------------------------------------
--echo

--echo # Test 2: The non-reserved user can not connect the database through the extra port.

--disable_query_log
--error 1045
connect(nor_conn1,127.0.0.1,normal_user,123456,mysql,1300);
--enable_query_log

--echo
--echo # ----------------------------------------------------------------------
--echo

--echo # Test 3: The number of sessions connected by extra port can be up to extra_max_connections.

connect(res_conn2,127.0.0.1,reserved_user,123456,mysql,1300);
select 2;
connect(res_conn3,127.0.0.1,reserved_user,123456,mysql,1300);
select 3;
connect(res_conn4,127.0.0.1,reserved_user,123456,mysql,1300);
select 4;
select count(*) from information_schema.PROCESSLIST where user in ('reserved_user');
select 5;
connect(res_conn5,127.0.0.1,reserved_user,123456,mysql,1300);
select count(*) from information_schema.PROCESSLIST where user in ('root','reserved_user');

--disable_query_log
--error 1040
connect(res_conn6,127.0.0.1,reserved_user,123456,mysql,1300);
--enable_query_log

--echo
--echo # ----------------------------------------------------------------------
--echo

--echo # Test 4: When the extra_max_connections resource is consumed, it does not affect the non 
--echo #         reserved account login through the normal port. 

connect(nor_conn1,127.0.0.1,normal_user,123456,mysql);
select 1;

--echo
--echo # ----------------------------------------------------------------------
--echo

--echo # Test 5: The number of sessions connected by normal port can be up to max_connections.

connect(nor_conn2,127.0.0.1,normal_user,123456,mysql);
select 2;
connect(nor_conn3,127.0.0.1,normal_user,123456,mysql);
select 3;
connect(nor_conn4,127.0.0.1,normal_user,123456,mysql);
select 4;
select count(*) from information_schema.PROCESSLIST where user in ('root','normal_user');

--disable_query_log
--error 1040
connect(nor_conn5,127.0.0.1,normal_user,123456,mysql);
--enable_query_log

--echo
--echo # ----------------------------------------------------------------------
--echo

--echo # Test 6: When the max_connections resource is consumed, it does not affect the 
--echo #         reserved account login through the extra port. 

disconnect res_conn5;
connect(res_conn6,127.0.0.1,reserved_user,123456,mysql,1300);
select 6;
select count(*) from information_schema.PROCESSLIST where user in ('reserved_user');


--echo
--echo # ----------------------------------------------------------------------
--echo

--echo # Cleanup

connection default;
--disable_warnings
DROP USER reserved_user,normal_user,super;
DELETE FROM user;
INSERT INTO user SELECT * FROM user_backup;
DROP TABLE user_backup;
--enable_warnings
