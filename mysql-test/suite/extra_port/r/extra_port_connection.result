USE mysql;

# ----------------------------------------------------------------------

# Setup
DROP TABLE IF EXISTS user_backup;
CREATE TABLE user_backup LIKE user;
INSERT INTO user_backup SELECT * FROM user;
GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, RELOAD, PROCESS, REFERENCES, INDEX, ALTER, SHOW DATABASES, CREATE TEMPORARY TABLES, LOCK TABLES, EXECUTE, REPLICATION SLAVE, REPLICATION CLIENT, CREATE VIEW, SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, CREATE USER, EVENT, TRIGGER ON *.* TO 'reserved_user'@'%' IDENTIFIED BY '123456' WITH GRANT OPTION;
Warnings:
Warning	1287	Using GRANT for creating new user is deprecated and will be removed in future release. Create new user with CREATE USER statement.
GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, RELOAD, PROCESS, REFERENCES, INDEX, ALTER, SHOW DATABASES, CREATE TEMPORARY TABLES, LOCK TABLES, EXECUTE, REPLICATION SLAVE, REPLICATION CLIENT, CREATE VIEW, SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, CREATE USER, EVENT, TRIGGER ON *.* TO 'normal_user'@'%' IDENTIFIED BY '123456' WITH GRANT OPTION;
Warnings:
Warning	1287	Using GRANT for creating new user is deprecated and will be removed in future release. Create new user with CREATE USER statement.
GRANT ALL PRIVILEGES ON *.* TO 'super'@'%' IDENTIFIED BY '123456' WITH GRANT OPTION;
Warnings:
Warning	1287	Using GRANT for creating new user is deprecated and will be removed in future release. Create new user with CREATE USER statement.
# When the parameter extra_port is not zero, the extra port feature is opened and normal port still work as before.
show variables like 'rds_reserved_users';
Variable_name	Value
rds_reserved_users	reserved_user
show variables like 'extra_port';
Variable_name	Value
extra_port	1300
show variables like 'extra_max_connections';
Variable_name	Value
extra_max_connections	5

# ----------------------------------------------------------------------

# Test 1: The reserved user can connect the database through the extra port.
select 1;
1
1

# ----------------------------------------------------------------------

# Test 2: The non-reserved user can not connect the database through the extra port.
ERROR 28000: Access denied for user 'normal_user'@'localhost' (using password: YES)

# ----------------------------------------------------------------------

# Test 3: The number of sessions connected by extra port can be up to extra_max_connections.
select 2;
2
2
select 3;
3
3
select 4;
4
4
select count(*) from information_schema.PROCESSLIST where user in ('reserved_user');
count(*)
4
select 5;
5
5
select count(*) from information_schema.PROCESSLIST where user in ('root','reserved_user');
count(*)
6
ERROR 08004: Too many connections

# ----------------------------------------------------------------------

# Test 4: When the extra_max_connections resource is consumed, it does not affect the non 
#         reserved account login through the normal port. 
select 1;
1
1

# ----------------------------------------------------------------------

# Test 5: The number of sessions connected by normal port can be up to max_connections.
select 2;
2
2
select 3;
3
3
select 4;
4
4
select count(*) from information_schema.PROCESSLIST where user in ('root','normal_user');
count(*)
5
ERROR 08004: Too many connections

# ----------------------------------------------------------------------

# Test 6: When the max_connections resource is consumed, it does not affect the 
#         reserved account login through the extra port. 
select 6;
6
6
select count(*) from information_schema.PROCESSLIST where user in ('reserved_user');
count(*)
5

# ----------------------------------------------------------------------

# Cleanup
DROP USER reserved_user,normal_user,super;
DELETE FROM user;
INSERT INTO user SELECT * FROM user_backup;
DROP TABLE user_backup;
